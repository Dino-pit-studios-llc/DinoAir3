// Mocks generated by Mockito 5.4.6 from annotations
// in crypto_dash/test/features/file_search/data/repositories/file_search_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:crypto_dash/features/file_search/data/datasources/file_search_remote_data_source.dart'
    as _i4;
import 'package:crypto_dash/features/file_search/data/models/directory_config_dto.dart'
    as _i6;
import 'package:crypto_dash/features/file_search/data/models/file_search_result_dto.dart'
    as _i2;
import 'package:crypto_dash/features/file_search/data/models/search_statistics_dto.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFileSearchResultDTO_0 extends _i1.SmartFake
    implements _i2.FileSearchResultDTO {
  _FakeFileSearchResultDTO_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSearchStatisticsDTO_1 extends _i1.SmartFake
    implements _i3.SearchStatisticsDTO {
  _FakeSearchStatisticsDTO_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FileSearchRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSearchRemoteDataSource extends _i1.Mock
    implements _i4.FileSearchRemoteDataSource {
  MockFileSearchRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<List<_i2.FileSearchResultDTO>> searchFiles({
    required String? query,
    List<String>? fileTypes,
    List<String>? directories,
    int? maxResults,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFiles,
          [],
          {
            #query: query,
            #fileTypes: fileTypes,
            #directories: directories,
            #maxResults: maxResults,
          },
        ),
        returnValue: _i5.Future<List<_i2.FileSearchResultDTO>>.value(
            <_i2.FileSearchResultDTO>[]),
      ) as _i5.Future<List<_i2.FileSearchResultDTO>>);

  @override
  _i5.Future<_i2.FileSearchResultDTO> getFileInfo(String? filePath) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileInfo,
          [filePath],
        ),
        returnValue: _i5.Future<_i2.FileSearchResultDTO>.value(
            _FakeFileSearchResultDTO_0(
          this,
          Invocation.method(
            #getFileInfo,
            [filePath],
          ),
        )),
      ) as _i5.Future<_i2.FileSearchResultDTO>);

  @override
  _i5.Future<void> addToIndex(
    String? path,
    bool? includeSubdirectories,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToIndex,
          [
            path,
            includeSubdirectories,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeFromIndex(String? path) => (super.noSuchMethod(
        Invocation.method(
          #removeFromIndex,
          [path],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.SearchStatisticsDTO> getSearchStatistics() =>
      (super.noSuchMethod(
        Invocation.method(
          #getSearchStatistics,
          [],
        ),
        returnValue: _i5.Future<_i3.SearchStatisticsDTO>.value(
            _FakeSearchStatisticsDTO_1(
          this,
          Invocation.method(
            #getSearchStatistics,
            [],
          ),
        )),
      ) as _i5.Future<_i3.SearchStatisticsDTO>);

  @override
  _i5.Future<List<_i6.DirectoryConfigDTO>> getWatchedDirectories() =>
      (super.noSuchMethod(
        Invocation.method(
          #getWatchedDirectories,
          [],
        ),
        returnValue: _i5.Future<List<_i6.DirectoryConfigDTO>>.value(
            <_i6.DirectoryConfigDTO>[]),
      ) as _i5.Future<List<_i6.DirectoryConfigDTO>>);

  @override
  _i5.Future<void> addWatchedDirectory(
    String? path,
    bool? includeSubdirectories,
    List<String>? extensions,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWatchedDirectory,
          [
            path,
            includeSubdirectories,
            extensions,
          ],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> removeWatchedDirectory(String? path) => (super.noSuchMethod(
        Invocation.method(
          #removeWatchedDirectory,
          [path],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> reindexAll() => (super.noSuchMethod(
        Invocation.method(
          #reindexAll,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);
}
