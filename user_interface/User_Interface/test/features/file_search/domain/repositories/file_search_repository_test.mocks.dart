// Mocks generated by Mockito 5.4.6 from annotations
// in crypto_dash/test/features/file_search/domain/repositories/file_search_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:crypto_dash/core/errors/failure.dart' as _i5;
import 'package:crypto_dash/features/file_search/domain/entities/directory_config.dart'
    as _i8;
import 'package:crypto_dash/features/file_search/domain/entities/file_search_result.dart'
    as _i6;
import 'package:crypto_dash/features/file_search/domain/entities/search_statistics.dart'
    as _i7;
import 'package:crypto_dash/features/file_search/domain/repositories/file_search_repository.dart'
    as _i3;
import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [FileSearchRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockFileSearchRepository extends _i1.Mock
    implements _i3.FileSearchRepository {
  MockFileSearchRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.FileSearchResult>>> searchFiles({
    required String? query,
    List<String>? fileTypes,
    List<String>? directories,
    int? maxResults,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchFiles,
          [],
          {
            #query: query,
            #fileTypes: fileTypes,
            #directories: directories,
            #maxResults: maxResults,
          },
        ),
        returnValue: _i4
            .Future<_i2.Either<_i5.Failure, List<_i6.FileSearchResult>>>.value(
            _FakeEither_0<_i5.Failure, List<_i6.FileSearchResult>>(
          this,
          Invocation.method(
            #searchFiles,
            [],
            {
              #query: query,
              #fileTypes: fileTypes,
              #directories: directories,
              #maxResults: maxResults,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, List<_i6.FileSearchResult>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i6.FileSearchResult>> getFileInfo(
          {required String? filePath}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getFileInfo,
          [],
          {#filePath: filePath},
        ),
        returnValue:
            _i4.Future<_i2.Either<_i5.Failure, _i6.FileSearchResult>>.value(
                _FakeEither_0<_i5.Failure, _i6.FileSearchResult>(
          this,
          Invocation.method(
            #getFileInfo,
            [],
            {#filePath: filePath},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, _i6.FileSearchResult>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addToIndex({
    required String? path,
    bool? includeSubdirectories = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addToIndex,
          [],
          {
            #path: path,
            #includeSubdirectories: includeSubdirectories,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addToIndex,
            [],
            {
              #path: path,
              #includeSubdirectories: includeSubdirectories,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> removeFromIndex(
          {required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeFromIndex,
          [],
          {#path: path},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #removeFromIndex,
            [],
            {#path: path},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i7.SearchStatistics>>
      getSearchStatistics() => (super.noSuchMethod(
            Invocation.method(
              #getSearchStatistics,
              [],
            ),
            returnValue:
                _i4.Future<_i2.Either<_i5.Failure, _i7.SearchStatistics>>.value(
                    _FakeEither_0<_i5.Failure, _i7.SearchStatistics>(
              this,
              Invocation.method(
                #getSearchStatistics,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, _i7.SearchStatistics>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i8.DirectoryConfig>>>
      getWatchedDirectories() => (super.noSuchMethod(
            Invocation.method(
              #getWatchedDirectories,
              [],
            ),
            returnValue: _i4.Future<
                    _i2.Either<_i5.Failure, List<_i8.DirectoryConfig>>>.value(
                _FakeEither_0<_i5.Failure, List<_i8.DirectoryConfig>>(
              this,
              Invocation.method(
                #getWatchedDirectories,
                [],
              ),
            )),
          ) as _i4.Future<_i2.Either<_i5.Failure, List<_i8.DirectoryConfig>>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> addWatchedDirectory({
    required String? path,
    bool? includeSubdirectories = true,
    List<String>? fileExtensions,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addWatchedDirectory,
          [],
          {
            #path: path,
            #includeSubdirectories: includeSubdirectories,
            #fileExtensions: fileExtensions,
          },
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #addWatchedDirectory,
            [],
            {
              #path: path,
              #includeSubdirectories: includeSubdirectories,
              #fileExtensions: fileExtensions,
            },
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> removeWatchedDirectory(
          {required String? path}) =>
      (super.noSuchMethod(
        Invocation.method(
          #removeWatchedDirectory,
          [],
          {#path: path},
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #removeWatchedDirectory,
            [],
            {#path: path},
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);

  @override
  _i4.Future<_i2.Either<_i5.Failure, void>> reindexAll() => (super.noSuchMethod(
        Invocation.method(
          #reindexAll,
          [],
        ),
        returnValue: _i4.Future<_i2.Either<_i5.Failure, void>>.value(
            _FakeEither_0<_i5.Failure, void>(
          this,
          Invocation.method(
            #reindexAll,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Either<_i5.Failure, void>>);
}
