import 'dart:async';

import 'note_entity.dart';

/// Repository interface for notes domain operations.
///
/// This repository defines the contract for all note-related data operations
/// following Clean Architecture principles. Implementations handle data source
/// communication, error handling, and data transformation.
///
/// ## Responsibilities
/// - CRUD operations for notes (Create, Read, Update, Delete)
/// - Search and filtering operations
/// - Data validation and transformation
/// - Error handling and failure mapping
///
/// ## Usage Example
/// ```dart
/// class GetAllNotesUseCase {
///   final NoteRepository repository;
///
///   const GetAllNotesUseCase(this.repository);
///
///   Future<List<NoteEntity>> call() {
///     return repository.listNotes();
///   }
/// }
/// ```
///
/// ## Error Handling
/// All operations may throw exceptions that should be handled by the caller:
/// - `ServerException`: Backend server errors (500+)
/// - `NetworkException`: Network connectivity issues
/// - `NotFoundException`: Requested note not found (404)
/// - `ValidationException`: Invalid note data (400)
///
/// ## Implementation Notes
/// Implementations should:
/// - Return domain entities (not DTOs)
/// - Handle all data source exceptions
/// - Validate input parameters
/// - Log operations for debugging
/// - Support offline/cache scenarios where applicable
///
/// See also:
/// - [NoteEntity]: Domain entity representing a note
/// - [CreateNoteUseCase]: Use case for creating notes
/// - [UpdateNoteUseCase]: Use case for updating notes
abstract class NoteRepository {
  /// Retrieves all notes from the data source.
  ///
  /// Returns a list of all notes sorted by creation date (newest first).
  /// Returns an empty list if no notes exist.
  ///
  /// Example:
  /// ```dart
  /// final notes = await repository.listNotes();
  /// print('Found ${notes.length} notes');
  /// ```
  ///
  /// Throws:
  /// - [ServerException] if backend returns 500+ error
  /// - [NetworkException] if network request fails
  Future<List<NoteEntity>> listNotes();

  /// Searches notes by query text and/or tags.
  ///
  /// Performs full-text search on note title and content when [query] is provided.
  /// Filters by tags when [tags] is provided. Both filters can be combined.
  ///
  /// Parameters:
  /// - [query]: Optional search text (searches title and content)
  /// - [tags]: Optional list of tags to filter by (OR logic)
  ///
  /// Returns notes matching the search criteria, sorted by relevance.
  /// Returns empty list if no matches found.
  ///
  /// Example:
  /// ```dart
  /// // Search by text
  /// final results = await repository.searchNotes(query: 'meeting');
  ///
  /// // Search by tags
  /// final tagged = await repository.searchNotes(tags: ['work', 'urgent']);
  ///
  /// // Combined search
  /// final combined = await repository.searchNotes(
  ///   query: 'project',
  ///   tags: ['active'],
  /// );
  /// ```
  ///
  /// Throws:
  /// - [ValidationException] if query is empty and tags is empty/null
  /// - [ServerException] if backend returns 500+ error
  /// - [NetworkException] if network request fails
  Future<List<NoteEntity>> searchNotes({String? query, List<String>? tags});

  /// Retrieves a single note by its unique identifier.
  ///
  /// Parameters:
  /// - [id]: The unique identifier of the note (UUID format)
  ///
  /// Returns the note entity if found.
  ///
  /// Example:
  /// ```dart
  /// try {
  ///   final note = await repository.getNote('123e4567-e89b-12d3-a456-426614174000');
  ///   print('Title: ${note.title}');
  /// } on NotFoundException catch (e) {
  ///   print('Note not found: ${e.message}');
  /// }
  /// ```
  ///
  /// Throws:
  /// - [ValidationException] if [id] is empty or invalid format
  /// - [NotFoundException] if note with [id] does not exist (404)
  /// - [ServerException] if backend returns 500+ error
  /// - [NetworkException] if network request fails
  Future<NoteEntity> getNote(String id);

  /// Creates a new note in the data source.
  ///
  /// Parameters:
  /// - [note]: The note entity to create (id will be generated by backend)
  ///
  /// Returns the created note entity with server-generated id and timestamps.
  ///
  /// Example:
  /// ```dart
  /// final newNote = NoteEntity(
  ///   id: '', // Will be generated
  ///   title: 'Meeting Notes',
  ///   content: 'Discussion points...',
  ///   tags: ['work', 'meeting'],
  /// );
  ///
  /// final created = await repository.createNote(newNote);
  /// print('Created note with ID: ${created.id}');
  /// ```
  ///
  /// Throws:
  /// - [ValidationException] if note data is invalid (empty title, etc.)
  /// - [ServerException] if backend returns 500+ error
  /// - [NetworkException] if network request fails
  Future<NoteEntity> createNote(NoteEntity note);

  /// Updates an existing note in the data source.
  ///
  /// Parameters:
  /// - [note]: The note entity with updated fields (must have valid id)
  ///
  /// Returns the updated note entity with new updatedAt timestamp.
  ///
  /// Example:
  /// ```dart
  /// final updated = existingNote.copyWith(
  ///   title: 'Updated Title',
  ///   content: 'New content',
  /// );
  ///
  /// final result = await repository.updateNote(updated);
  /// print('Note updated at: ${result.updatedAt}');
  /// ```
  ///
  /// Throws:
  /// - [ValidationException] if note data is invalid or id is missing
  /// - [NotFoundException] if note with id does not exist (404)
  /// - [ServerException] if backend returns 500+ error
  /// - [NetworkException] if network request fails
  Future<NoteEntity> updateNote(NoteEntity note);

  /// Deletes a note from the data source.
  ///
  /// Parameters:
  /// - [id]: The unique identifier of the note to delete
  ///
  /// This operation is idempotent - deleting a non-existent note succeeds.
  ///
  /// Example:
  /// ```dart
  /// await repository.deleteNote('123e4567-e89b-12d3-a456-426614174000');
  /// print('Note deleted successfully');
  /// ```
  ///
  /// Throws:
  /// - [ValidationException] if [id] is empty or invalid format
  /// - [ServerException] if backend returns 500+ error
  /// - [NetworkException] if network request fails
  Future<void> deleteNote(String id);

  /// Retrieves a single note by its unique identifier.
  ///
  /// This is an alias for [getNote] provided for API consistency.
  /// Prefer using [getNote] directly.
  ///
  /// Parameters:
  /// - [noteId]: The unique identifier of the note
  ///
  /// Returns the note entity if found.
  ///
  /// See [getNote] for detailed documentation and examples.
  Future<NoteEntity> getNoteById(String noteId);
}
