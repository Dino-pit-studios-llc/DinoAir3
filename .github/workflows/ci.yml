name: CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"
  REGISTRY: ghcr.io

jobs:
  lint:
    name: Lint & Format Check
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install ruff black
          if [ -f API/requirements-dev.txt ]; then pip install -r API/requirements-dev.txt; fi

      - name: Run Ruff linter
        run: ruff check .

      - name: Run Ruff formatter check
        run: ruff format . --check

      - name: Run Black formatter check
        run: black . --check

  test:
    name: Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: dinoair
          POSTGRES_PASSWORD: testpass
          POSTGRES_DB: dinoair_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f API/requirements-dev.txt ]; then pip install -r API/requirements-dev.txt; fi
          if [ -f API/requirements.txt ]; then pip install -r API/requirements.txt; fi

      - name: Run pytest with coverage
        env:
          DATABASE_URL: postgresql://dinoair:testpass@localhost:5432/dinoair_test
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest --cov=. --cov-report=xml --cov-report=term-missing --junitxml=test-results.xml

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  security:
    name: Security Checks
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Run Bandit security scan
        run: |
          pip install bandit
          bandit -r . -ll -f json -o bandit-report.json || true

      - name: Upload Bandit results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  codacy:
    name: Codacy Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f API/requirements-dev.txt ]; then pip install -r API/requirements-dev.txt; fi
          if [ -f API/requirements.txt ]; then pip install -r API/requirements.txt; fi

      - name: Run coverage for Codacy
        env:
          DATABASE_URL: sqlite:///test.db
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest --cov=. --cov-report=xml
          ls -la coverage.xml || echo "No coverage.xml found"

      - name: Run Codacy Coverage Reporter
        uses: codacy/codacy-coverage-reporter-action@v1
        with:
          project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
          coverage-reports: coverage.xml
          force-coverage-parser: cobertura
        continue-on-error: true

  deepsource:
    name: DeepSource Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f API/requirements-dev.txt ]; then pip install -r API/requirements-dev.txt; fi
          if [ -f API/requirements.txt ]; then pip install -r API/requirements.txt; fi
          pip install deepsource-cli

      - name: Run DeepSource analysis
        env:
          DEEPSOURCE_DSN: ${{ secrets.DEEPSOURCE_DSN }}
        run: |
          deepsource report --analyzer python --analyzer secrets || echo "DeepSource analysis failed (non-blocking)"
        continue-on-error: true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: [ lint, test, security ]
    permissions:
      contents: read
      packages: write
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.mcp
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build ]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Deploy notification
        run: |
          echo "Deployment workflow placeholder"
          echo "Configure your deployment target (e.g., AWS, GCP, Heroku, DigitalOcean)"
          echo "Add deployment steps based on your infrastructure"
